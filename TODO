LIVELLO 2:
    "Pagina ORACOLO":
    1. Nella pagina principale avrà 4 BUTTON:
        - Gestione delle REGISTER REQUEST
        - Trasferimento ECCEZIONALE dei COIN
        - Controllo dei LOG
        - Altro
    1.1. Nel BUTTON delle REGISTER REQUEST vi sarà posto sotto il numero delle richieste fatte:
        - REQUEST di INSERT AZIENDA
        - REQUEST di INSERT EMPLOYER per AZIENDA ESISTENTE
        - REQUEST per DELETE AZIENDA
        - REQUEST per DELETE EMPLOYER
    Queste richieste apriranno delle pagine dedicate che mostreranno i dati delle REQUEST FORM e i comandi per gestirle (INSERT, DELETE):

LIVELLO 1:
    "Pagina EMPLOYER":
    1. Nella pagina principale avrà 6 BUTTON:
        - CREATE PRODUCT
        - UPDATE PRODUCT
        - Visualizzazione dei propri PRODUCT
        - Creazione delle PRODUCT REQUEST
        - Gestione delle PRODUCT REQUEST fatte a lui (come organizzazione)
        - Gestione delle DELIVERY
    1.1: Se accettata la DELIVERY REQUEST di altri si apre una pagina per la creazione della DELIVERY
        - Nelle DELIVERY usare le API per calcolare la distanza tra le due organizzazioni della DELIVERY e la CO2 generata
        - Collegamento CARRIER per ogni DELIVERY
    1.2: Creazione rotta UPDATE PERSONAL DATA
    1.3: Creazione pagina COIN REQUESTS dove un'azienda richiede un tot di coins in modo che le altre aziende possano trasferirli a lei. Si traduce in due pagine e tre rotte
        - Rotta VIEW REQUESTS dove vengono mostrate tutte le request delle altre organizzazioni con un button per accettarle
        - Rotta fatta da un BUTTON in VIEW REQUESTS dove se cliccato apre la pagina in cui è possibile creare una COIN REQUEST
        - Rotta fatta dal SUBMIT della FORM di Creazione della COIN REQUEST
    CREARE TABELLA COIN REQUESTS NEL DB: true

TODO 10/01/2025:
    Gabriel:
        - view_deliveries e view_products (DONE)
    Caterina:
        - create_product (DONE)
    Tosca:
        - update_product (DONE)

TODO 11/01/2025:
    Gabriel:
        - Creazione della Tabella PRODUCT REQUEST nel DB
        - view PRODUCT REQUEST
        - Implementazione CO2 nei PRODUCT (DONE)
        - Gestione accettazione PRODUCT REQUEST:
            - Diminuire la quantità del prodotto
            - Collegare organizzazioni CARRIER (DONE)
        - Creare algoritmo per il calcolo della CO2 della DELIVERY: ogni tonnellata bonus/malus = +-1 coin
        - Creazione della Tabella REGISTER REQUEST nel DB
    Tosca:
        - CREATE PRODUCT REQUEST (DONE)
    Caterina:
        - Creazione rotta UPDATE PERSONAL DATA: rotta che apre una form che permette la modifica dei dati personali
            - password
            - email
            - name
            - surname
        - Questa form permette di visualizzare i dati già presenti e di aggiornarli: (eccetto la password che è criptata e può essere solo aggiornata e non letta) (DONE)

TODO 14/01/2025:
    Caterina:
        - Implementazione trasferimento coin (min 20 coin) nell'ORACOLO. Significa che puoi trasferire coin a piacimento sopra la soglia (DONE)
    Tosca:
        - Accettazione organizzazioni e employer (DONE)

TODO 18/01/2025:
    1. Capire e risolvere bug doppia compilazione per funzionare
    2. Sistemare Sicurezza DB con limiti ai campi
    3. Testing tutte le form con validazione e messaggistica
    4. Eventuale utilizzo dei middleware come gestione delle validazioni
    5. Risolvere la scadenza dei cookie

DOMANDE DA FARE AL PROFESSORE:
    1. Effettivamente una volta collegato il sito alla blockchain cosa bisogna fare:
        - Creare un modulo per la gestione dei COIN
        - Creare un modulo per la gestione delle DELIVERY
        - Creare un modulo per la gestione delle REQUEST
        - Creare un modulo per la gestione delle COIN REQUEST
    2. Se come abbiamo implementato la blockchain è corretto:
        - Abbiamo usato la blockchain per la gestione dei COIN e delle DELIVERY
        - Abbiamo usato la blockchain per la gestione delle REQUEST
        - Abbiamo usato la blockchain per la gestione delle COIN REQUEST
    3. Log: come li vuole il professore, i permessi per evitare modifiche, etc.
    4. Cosa manca nel dubbio:
        - Sicurezza
        - Testing
        - Middleware
        - Cookie
        - Validazione
        - Sicurezza DB
        - Bug
        - Sicurezza
        - Sicurezza
        - Sicurezza

PRISM:
    1. P. Guarantee: "Authorized users who request access to the resource will eventually access it"

LINEE GUIDA VALUTAZIONE PROGETTO:
    1. Modellazione mediante Markov Chain di una unità e verificare una proprietà di Safety e una di Guarantee/Response utilizzando PRISM:
        - Safety: "Authorized users who request access to the resource will eventually access it"
        - Guarantee/Response: "Authorized users who request access to the resource will eventually access it"
    2. Utilizzare linee guida OWASP e/o Saltzer & Schroeder e/o Sommerville (PARZIALE):
        - OWASP: "A1:2017-Injection"
        - Saltzer & Schroeder: "Open Design"
        - Sommerville: "Security Requirements"
    3. Sintetizzare un monitor di runtime enforcement di una proprietà di Safety e una di Guarantee/Response:
        - Safety: "Authorized users who request access to the resource will eventually access it"
        - Guarantee/Response: "Authorized users who request access to the resource will eventually access it"
    4. Utilizzare uno dei seguenti standard di codifica per Solidity:
        - ConsenSys: "Consensys Solidity Style Guide"
        - DappHub: "DappHub Solidity Style Guide"
        - Solidity: "Solidity Style Guide"
    5. Utilizzare strumenti di analisi statica di Remix: Solidity Analyzer e Solhint

REVISIONE PROFESSORE:
    1. Togliere login, concentrarsi sul modulo on-Chain:
        - OPPURE quando vi è una dichiarazione di CO2 e poi si calcolano i crediti

TODO_29_01_2025:
    1. Correggere bug: 
        - doppia compilazione
        - cookie 
    2. Correggere Vulnerabilità:
        - URL
        - hidden_tag nelle form DONE
    3. Pulire codice:
        - python:
            - utilities.py DONE
            - messages.py
        - javascript: